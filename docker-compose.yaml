x-common-variables: &common-variables
  ENV: local
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  REDIRECT_URI: ${REDIRECT_URI}
  IDP_URL: ${IDP_URL}
  SP_CLIENT_ID: ${SP_CLIENT_ID}
  SP_CLIENT_SECRET: ${SP_CLIENT_SECRET}
  IDP_TOKEN_URL: ${IDP_TOKEN_URL}
  IDP_JWKS_URL: ${IDP_JWKS_URL}


services:
  service_provider:
    profiles: ["sp", "backend"]
    build:
      context: process/sp
      dockerfile: Dockerfile
    container_name: "service_provider"
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./process/sp/app:/code
    environment:
      <<: *common-variables
      POSTGRES_HOST: ${SP_POSTGRES_HOST}
      POSTGRES_PORT: ${SP_POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${SP_DJANGO_SECRET_KEY}
    depends_on:
      - sp_db
      - sp_migrate
    networks:
      - auth_network  

#Express server service
  sp_express:
    profiles: ["sp"]  # Same profile as service_provider to run by default
    build:
      context: process/sp
      dockerfile: frontend/Dockerfile
    container_name: "sp_express"
    # command: cd frontend  # Run the Express server
    working_dir: /code/frontend
    command: npm start
    ports:
      - "8002:8002"
    # volumes:
    #   - ./process/sp/frontend:/code/frontend 
    # would need to be more specific about what to include in volumes if we want the flexibility that they provide, 
    # if we want client to update then we need to specify that
    #
    depends_on:
      - service_provider

  #React development server
  sp_react_dev:
    profiles: ["sp"]  # Same profile as others to run by default
    build:
      context: process/sp
      dockerfile: frontend/Dockerfile
    container_name: "sp_react_dev"
    working_dir: /code/frontend/client
    command: npm start
    ports:
      - "3000:3000"
    # would need to be more specific about what to include in volumes if we want the flexibility that they provide, 
    # if we want client to update then we need to specify that
    #
    # volumes:
      # - ./process/sp/frontend:/code/frontend 
    environment:
      - NODE_ENV=development
    depends_on:
      - sp_express



  sp_db:
    profiles: ["sp", "backend"]
    image: postgres:14
    container_name: sp_postgres
    volumes:
      - sp_data:/var/lib/postgresql/data/
    environment:
      <<: *common-variables
      POSTGRES_HOST: ${SP_POSTGRES_HOST}
      POSTGRES_PORT: ${SP_POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - auth_network
    

  sp_migrate:
    profiles: ["sp", "backend"]
    build:
      context: process/sp
      dockerfile: Dockerfile
    container_name: sp_migrate
    restart: no
    command: bash -c "python manage.py makemigrations && python manage.py migrate"
    environment: 
      <<: *common-variables
      POSTGRES_HOST: ${SP_POSTGRES_HOST}
      POSTGRES_PORT: ${SP_POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${SP_DJANGO_SECRET_KEY}
    volumes:
      - ./process/sp/app:/code
    depends_on:
      sp_db:
        condition: service_healthy
    networks:
      - auth_network 

  identity_provider:
    profiles: ["idp", "backend"]
    build: 
      context: process/idp
      dockerfile: Dockerfile
    container_name: "identity_provider"
    hostname: "identityprovider"
    command: python manage.py runserver 0.0.0.0:8001
    ports:
      - "8001:8001"
    volumes:
      - ./process/idp/app:/code
    environment:
      <<: *common-variables
      POSTGRES_HOST: ${IDP_POSTGRES_HOST}
      POSTGRES_PORT: ${IDP_POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${IDP_DJANGO_SECRET_KEY}
      OIDC_RSA_PRIVATE_KEY: ${OIDC_RSA_PRIVATE_KEY}
    depends_on:
      - idp_db
      - idp_migrate
    networks:
      - auth_network  

  idp_db:
    profiles: ["idp", "backend"]
    image: postgres:14
    container_name: idp_postgres
    volumes:
      - idp_data:/var/lib/postgresql/data/
    environment:
      <<: *common-variables
      POSTGRES_HOST: ${IDP_POSTGRES_HOST}
      POSTGRES_PORT: ${IDP_POSTGRES_PORT}
    expose: 
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    networks:
      - auth_network

  idp_migrate:
    profiles: ["idp", "backend"]
    build:
      context: process/idp
      dockerfile: Dockerfile
    container_name: idp_migrate
    restart: no
    command: bash -c "python manage.py makemigrations && python manage.py migrate"
    environment: 
      <<: *common-variables
      POSTGRES_HOST: ${IDP_POSTGRES_HOST}
      POSTGRES_PORT: ${IDP_POSTGRES_PORT}
      OIDC_RSA_PRIVATE_KEY: ${OIDC_RSA_PRIVATE_KEY}
    volumes:
      - ./process/idp/app:/code
    depends_on:
      - idp_db
    networks:
      - auth_network 


volumes:
  sp_data:
    driver: local
  idp_data:
    driver: local

networks:
  auth_network:
    name: auth_network
    driver: bridge